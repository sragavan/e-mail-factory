/*
 * Generated by gdbus-codegen 2.30.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __E_GDBUS_EMAILSTORE_H__
#define __E_GDBUS_EMAILSTORE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.mail.Store */

#define EGDBUS_TYPE_STORE (egdbus_store_get_type ())
#define EGDBUS_STORE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_TYPE_STORE, EGdbusStore))
#define EGDBUS_IS_STORE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_TYPE_STORE))
#define EGDBUS_STORE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), EGDBUS_TYPE_STORE, EGdbusStoreIface))

struct _EGdbusStore;
typedef struct _EGdbusStore EGdbusStore;
typedef struct _EGdbusStoreIface EGdbusStoreIface;

struct _EGdbusStoreIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_can_refresh_folder) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_info);

  gboolean (*handle_count_by_sql) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_expression,
    const gchar *arg_ops);

  gboolean (*handle_create_folder) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_parent_name,
    const gchar *arg_folder_name,
    const gchar *arg_ops);

  gboolean (*handle_delete_folder) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_folder_name,
    const gchar *arg_ops);

  gboolean (*handle_get_auth_types) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ops);

  gboolean (*handle_get_display_name) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_folder) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_full_name,
    guint arg_flags,
    const gchar *arg_ops);

  gboolean (*handle_get_folder_info) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_full_name,
    guint arg_flags,
    const gchar *arg_ops);

  gboolean (*handle_get_inbox) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ops);

  gboolean (*handle_get_junk) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ops);

  gboolean (*handle_get_name) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_brief);

  gboolean (*handle_get_password) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_provider_flags) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_provider_url_flags) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_trash) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ops);

  gboolean (*handle_get_uid) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_url) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_user_cache_dir) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_user_data_dir) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_is_folder_subscribed) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_folder_name);

  gboolean (*handle_noop) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ops);

  gboolean (*handle_rename_folder) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_old_folder_name,
    const gchar *arg_new_folder_name,
    const gchar *arg_ops);

  gboolean (*handle_search_by_sql) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_expression,
    const gchar *arg_ops);

  gboolean (*handle_set_display_name) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_full_name);

  gboolean (*handle_set_password) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_password);

  gboolean (*handle_subscribe_folder) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_folder_name,
    const gchar *arg_ops);

  gboolean (*handle_supports_subscriptions) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_sync) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_expunge,
    const gchar *arg_ops);

  gboolean (*handle_unsubscribe_folder) (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_folder_name,
    const gchar *arg_ops);

  void (*folder_created) (
    EGdbusStore *object,
    GVariant *arg_info);

  void (*folder_deleted) (
    EGdbusStore *object,
    GVariant *arg_info);

  void (*folder_opened) (
    EGdbusStore *object,
    const gchar *arg_folder);

  void (*folder_renamed) (
    EGdbusStore *object,
    const gchar *arg_old_name,
    GVariant *arg_info);

  void (*folder_subscribed) (
    EGdbusStore *object,
    GVariant *arg_info);

  void (*folder_unsubscribed) (
    EGdbusStore *object,
    GVariant *arg_info);

};

GType egdbus_store_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *egdbus_store_interface_info (void);
guint egdbus_store_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void egdbus_store_complete_get_display_name (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *full_name);

void egdbus_store_complete_set_display_name (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

void egdbus_store_complete_get_password (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *password);

void egdbus_store_complete_set_password (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation);

void egdbus_store_complete_get_user_data_dir (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void egdbus_store_complete_get_user_cache_dir (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void egdbus_store_complete_get_name (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void egdbus_store_complete_get_provider_flags (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    guint flags);

void egdbus_store_complete_get_provider_url_flags (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    guint flags);

void egdbus_store_complete_get_uid (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *uid);

void egdbus_store_complete_get_url (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *url);

void egdbus_store_complete_get_auth_types (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    GVariant *authtypes);

void egdbus_store_complete_get_folder (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_store_complete_get_folder_info (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    GVariant *infos);

void egdbus_store_complete_get_inbox (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_store_complete_get_junk (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_store_complete_get_trash (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *folder);

void egdbus_store_complete_create_folder (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    GVariant *info);

void egdbus_store_complete_delete_folder (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_rename_folder (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_sync (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_noop (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_can_refresh_folder (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_supports_subscriptions (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_is_folder_subscribed (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_subscribe_folder (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_unsubscribe_folder (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void egdbus_store_complete_search_by_sql (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    GVariant *folder_uids);

void egdbus_store_complete_count_by_sql (
    EGdbusStore *object,
    GDBusMethodInvocation *invocation,
    guint count);



/* D-Bus signal emissions functions: */
void egdbus_store_emit_folder_opened (
    EGdbusStore *object,
    const gchar *arg_folder);

void egdbus_store_emit_folder_created (
    EGdbusStore *object,
    GVariant *arg_info);

void egdbus_store_emit_folder_deleted (
    EGdbusStore *object,
    GVariant *arg_info);

void egdbus_store_emit_folder_renamed (
    EGdbusStore *object,
    const gchar *arg_old_name,
    GVariant *arg_info);

void egdbus_store_emit_folder_unsubscribed (
    EGdbusStore *object,
    GVariant *arg_info);

void egdbus_store_emit_folder_subscribed (
    EGdbusStore *object,
    GVariant *arg_info);



/* D-Bus method calls: */
void egdbus_store_call_get_display_name (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_display_name_finish (
    EGdbusStore *proxy,
    gchar **out_full_name,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_display_name_sync (
    EGdbusStore *proxy,
    gchar **out_full_name,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_set_display_name (
    EGdbusStore *proxy,
    const gchar *arg_full_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_set_display_name_finish (
    EGdbusStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_set_display_name_sync (
    EGdbusStore *proxy,
    const gchar *arg_full_name,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_password (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_password_finish (
    EGdbusStore *proxy,
    gchar **out_password,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_password_sync (
    EGdbusStore *proxy,
    gchar **out_password,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_set_password (
    EGdbusStore *proxy,
    const gchar *arg_password,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_set_password_finish (
    EGdbusStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_set_password_sync (
    EGdbusStore *proxy,
    const gchar *arg_password,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_user_data_dir (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_user_data_dir_finish (
    EGdbusStore *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_user_data_dir_sync (
    EGdbusStore *proxy,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_user_cache_dir (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_user_cache_dir_finish (
    EGdbusStore *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_user_cache_dir_sync (
    EGdbusStore *proxy,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_name (
    EGdbusStore *proxy,
    gboolean arg_brief,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_name_finish (
    EGdbusStore *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_name_sync (
    EGdbusStore *proxy,
    gboolean arg_brief,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_provider_flags (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_provider_flags_finish (
    EGdbusStore *proxy,
    guint *out_flags,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_provider_flags_sync (
    EGdbusStore *proxy,
    guint *out_flags,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_provider_url_flags (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_provider_url_flags_finish (
    EGdbusStore *proxy,
    guint *out_flags,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_provider_url_flags_sync (
    EGdbusStore *proxy,
    guint *out_flags,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_uid (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_uid_finish (
    EGdbusStore *proxy,
    gchar **out_uid,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_uid_sync (
    EGdbusStore *proxy,
    gchar **out_uid,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_url (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_url_finish (
    EGdbusStore *proxy,
    gchar **out_url,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_url_sync (
    EGdbusStore *proxy,
    gchar **out_url,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_auth_types (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_auth_types_finish (
    EGdbusStore *proxy,
    GVariant **out_authtypes,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_auth_types_sync (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    GVariant **out_authtypes,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_folder (
    EGdbusStore *proxy,
    const gchar *arg_full_name,
    guint arg_flags,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_folder_finish (
    EGdbusStore *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_folder_sync (
    EGdbusStore *proxy,
    const gchar *arg_full_name,
    guint arg_flags,
    const gchar *arg_ops,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_folder_info (
    EGdbusStore *proxy,
    const gchar *arg_full_name,
    guint arg_flags,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_folder_info_finish (
    EGdbusStore *proxy,
    GVariant **out_infos,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_folder_info_sync (
    EGdbusStore *proxy,
    const gchar *arg_full_name,
    guint arg_flags,
    const gchar *arg_ops,
    GVariant **out_infos,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_inbox (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_inbox_finish (
    EGdbusStore *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_inbox_sync (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_junk (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_junk_finish (
    EGdbusStore *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_junk_sync (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_get_trash (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_get_trash_finish (
    EGdbusStore *proxy,
    gchar **out_folder,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_get_trash_sync (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    gchar **out_folder,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_create_folder (
    EGdbusStore *proxy,
    const gchar *arg_parent_name,
    const gchar *arg_folder_name,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_create_folder_finish (
    EGdbusStore *proxy,
    GVariant **out_info,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_create_folder_sync (
    EGdbusStore *proxy,
    const gchar *arg_parent_name,
    const gchar *arg_folder_name,
    const gchar *arg_ops,
    GVariant **out_info,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_delete_folder (
    EGdbusStore *proxy,
    const gchar *arg_folder_name,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_delete_folder_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_delete_folder_sync (
    EGdbusStore *proxy,
    const gchar *arg_folder_name,
    const gchar *arg_ops,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_rename_folder (
    EGdbusStore *proxy,
    const gchar *arg_old_folder_name,
    const gchar *arg_new_folder_name,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_rename_folder_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_rename_folder_sync (
    EGdbusStore *proxy,
    const gchar *arg_old_folder_name,
    const gchar *arg_new_folder_name,
    const gchar *arg_ops,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_sync (
    EGdbusStore *proxy,
    gboolean arg_expunge,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_sync_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_sync_sync (
    EGdbusStore *proxy,
    gboolean arg_expunge,
    const gchar *arg_ops,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_noop (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_noop_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_noop_sync (
    EGdbusStore *proxy,
    const gchar *arg_ops,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_can_refresh_folder (
    EGdbusStore *proxy,
    GVariant *arg_info,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_can_refresh_folder_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_can_refresh_folder_sync (
    EGdbusStore *proxy,
    GVariant *arg_info,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_supports_subscriptions (
    EGdbusStore *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_supports_subscriptions_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_supports_subscriptions_sync (
    EGdbusStore *proxy,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_is_folder_subscribed (
    EGdbusStore *proxy,
    const gchar *arg_folder_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_is_folder_subscribed_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_is_folder_subscribed_sync (
    EGdbusStore *proxy,
    const gchar *arg_folder_name,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_subscribe_folder (
    EGdbusStore *proxy,
    const gchar *arg_folder_name,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_subscribe_folder_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_subscribe_folder_sync (
    EGdbusStore *proxy,
    const gchar *arg_folder_name,
    const gchar *arg_ops,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_unsubscribe_folder (
    EGdbusStore *proxy,
    const gchar *arg_folder_name,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_unsubscribe_folder_finish (
    EGdbusStore *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_unsubscribe_folder_sync (
    EGdbusStore *proxy,
    const gchar *arg_folder_name,
    const gchar *arg_ops,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_search_by_sql (
    EGdbusStore *proxy,
    const gchar *arg_expression,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_search_by_sql_finish (
    EGdbusStore *proxy,
    GVariant **out_folder_uids,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_search_by_sql_sync (
    EGdbusStore *proxy,
    const gchar *arg_expression,
    const gchar *arg_ops,
    GVariant **out_folder_uids,
    GCancellable *cancellable,
    GError **error);

void egdbus_store_call_count_by_sql (
    EGdbusStore *proxy,
    const gchar *arg_expression,
    const gchar *arg_ops,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean egdbus_store_call_count_by_sql_finish (
    EGdbusStore *proxy,
    guint *out_count,
    GAsyncResult *res,
    GError **error);

gboolean egdbus_store_call_count_by_sql_sync (
    EGdbusStore *proxy,
    const gchar *arg_expression,
    const gchar *arg_ops,
    guint *out_count,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define EGDBUS_TYPE_STORE_PROXY (egdbus_store_proxy_get_type ())
#define EGDBUS_STORE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_TYPE_STORE_PROXY, EGdbusStoreProxy))
#define EGDBUS_STORE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_TYPE_STORE_PROXY, EGdbusStoreProxyClass))
#define EGDBUS_STORE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_TYPE_STORE_PROXY, EGdbusStoreProxyClass))
#define EGDBUS_IS_STORE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_TYPE_STORE_PROXY))
#define EGDBUS_IS_STORE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_TYPE_STORE_PROXY))

typedef struct _EGdbusStoreProxy EGdbusStoreProxy;
typedef struct _EGdbusStoreProxyClass EGdbusStoreProxyClass;
typedef struct _EGdbusStoreProxyPrivate EGdbusStoreProxyPrivate;

struct _EGdbusStoreProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  EGdbusStoreProxyPrivate *priv;
};

struct _EGdbusStoreProxyClass
{
  GDBusProxyClass parent_class;
};

GType egdbus_store_proxy_get_type (void) G_GNUC_CONST;

void egdbus_store_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EGdbusStore *egdbus_store_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EGdbusStore *egdbus_store_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void egdbus_store_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EGdbusStore *egdbus_store_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EGdbusStore *egdbus_store_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define EGDBUS_TYPE_STORE_SKELETON (egdbus_store_skeleton_get_type ())
#define EGDBUS_STORE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EGDBUS_TYPE_STORE_SKELETON, EGdbusStoreSkeleton))
#define EGDBUS_STORE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EGDBUS_TYPE_STORE_SKELETON, EGdbusStoreSkeletonClass))
#define EGDBUS_STORE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EGDBUS_TYPE_STORE_SKELETON, EGdbusStoreSkeletonClass))
#define EGDBUS_IS_STORE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EGDBUS_TYPE_STORE_SKELETON))
#define EGDBUS_IS_STORE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EGDBUS_TYPE_STORE_SKELETON))

typedef struct _EGdbusStoreSkeleton EGdbusStoreSkeleton;
typedef struct _EGdbusStoreSkeletonClass EGdbusStoreSkeletonClass;
typedef struct _EGdbusStoreSkeletonPrivate EGdbusStoreSkeletonPrivate;

struct _EGdbusStoreSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  EGdbusStoreSkeletonPrivate *priv;
};

struct _EGdbusStoreSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType egdbus_store_skeleton_get_type (void) G_GNUC_CONST;

EGdbusStore *egdbus_store_skeleton_new (void);


G_END_DECLS

#endif /* __E_GDBUS_EMAILSTORE_H__ */
